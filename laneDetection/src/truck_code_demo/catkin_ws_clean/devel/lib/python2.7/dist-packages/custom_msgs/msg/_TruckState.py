# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/TruckState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_msgs.msg

class TruckState(genpy.Message):
  _md5sum = "b44a11adf408b3c6943c97950abcf47c"
  _type = "custom_msgs/TruckState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Position p
float32 theta1
float32 theta2

================================================================================
MSG: custom_msgs/Position
int32 x
int32 y
"""
  __slots__ = ['p','theta1','theta2']
  _slot_types = ['custom_msgs/Position','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p,theta1,theta2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TruckState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.p is None:
        self.p = custom_msgs.msg.Position()
      if self.theta1 is None:
        self.theta1 = 0.
      if self.theta2 is None:
        self.theta2 = 0.
    else:
      self.p = custom_msgs.msg.Position()
      self.theta1 = 0.
      self.theta2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2f().pack(_x.p.x, _x.p.y, _x.theta1, _x.theta2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p is None:
        self.p = custom_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.p.x, _x.p.y, _x.theta1, _x.theta2,) = _get_struct_2i2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2f().pack(_x.p.x, _x.p.y, _x.theta1, _x.theta2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p is None:
        self.p = custom_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.p.x, _x.p.y, _x.theta1, _x.theta2,) = _get_struct_2i2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2f = None
def _get_struct_2i2f():
    global _struct_2i2f
    if _struct_2i2f is None:
        _struct_2i2f = struct.Struct("<2i2f")
    return _struct_2i2f
