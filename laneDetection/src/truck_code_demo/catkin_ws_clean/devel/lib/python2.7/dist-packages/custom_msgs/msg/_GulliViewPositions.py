# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/GulliViewPositions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_msgs.msg

class GulliViewPositions(genpy.Message):
  _md5sum = "183dd0693b2375fdac3c57ae3e24b202"
  _type = "custom_msgs/GulliViewPositions"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Position p1
int32 tagid1
Position p2
int32 tagid2
int32 cameraid


================================================================================
MSG: custom_msgs/Position
int32 x
int32 y
"""
  __slots__ = ['p1','tagid1','p2','tagid2','cameraid']
  _slot_types = ['custom_msgs/Position','int32','custom_msgs/Position','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p1,tagid1,p2,tagid2,cameraid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GulliViewPositions, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.p1 is None:
        self.p1 = custom_msgs.msg.Position()
      if self.tagid1 is None:
        self.tagid1 = 0
      if self.p2 is None:
        self.p2 = custom_msgs.msg.Position()
      if self.tagid2 is None:
        self.tagid2 = 0
      if self.cameraid is None:
        self.cameraid = 0
    else:
      self.p1 = custom_msgs.msg.Position()
      self.tagid1 = 0
      self.p2 = custom_msgs.msg.Position()
      self.tagid2 = 0
      self.cameraid = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.p1.x, _x.p1.y, _x.tagid1, _x.p2.x, _x.p2.y, _x.tagid2, _x.cameraid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p1 is None:
        self.p1 = custom_msgs.msg.Position()
      if self.p2 is None:
        self.p2 = custom_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.p1.x, _x.p1.y, _x.tagid1, _x.p2.x, _x.p2.y, _x.tagid2, _x.cameraid,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7i().pack(_x.p1.x, _x.p1.y, _x.tagid1, _x.p2.x, _x.p2.y, _x.tagid2, _x.cameraid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p1 is None:
        self.p1 = custom_msgs.msg.Position()
      if self.p2 is None:
        self.p2 = custom_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.p1.x, _x.p1.y, _x.tagid1, _x.p2.x, _x.p2.y, _x.tagid2, _x.cameraid,) = _get_struct_7i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
