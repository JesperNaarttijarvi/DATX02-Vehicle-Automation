// Generated by gencpp from file custom_msgs/TruckState.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_TRUCKSTATE_H
#define CUSTOM_MSGS_MESSAGE_TRUCKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msgs/Position.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct TruckState_
{
  typedef TruckState_<ContainerAllocator> Type;

  TruckState_()
    : p()
    , theta1(0.0)
    , theta2(0.0)  {
    }
  TruckState_(const ContainerAllocator& _alloc)
    : p(_alloc)
    , theta1(0.0)
    , theta2(0.0)  {
  (void)_alloc;
    }



   typedef  ::custom_msgs::Position_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef float _theta1_type;
  _theta1_type theta1;

   typedef float _theta2_type;
  _theta2_type theta2;





  typedef boost::shared_ptr< ::custom_msgs::TruckState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::TruckState_<ContainerAllocator> const> ConstPtr;

}; // struct TruckState_

typedef ::custom_msgs::TruckState_<std::allocator<void> > TruckState;

typedef boost::shared_ptr< ::custom_msgs::TruckState > TruckStatePtr;
typedef boost::shared_ptr< ::custom_msgs::TruckState const> TruckStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::TruckState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::TruckState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/kem/Desktop/ChalmersKandidat/Kandidat19/catkin_ws_clean/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::TruckState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::TruckState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::TruckState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::TruckState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::TruckState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::TruckState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::TruckState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b44a11adf408b3c6943c97950abcf47c";
  }

  static const char* value(const ::custom_msgs::TruckState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb44a11adf408b3c6ULL;
  static const uint64_t static_value2 = 0x943c97950abcf47cULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::TruckState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/TruckState";
  }

  static const char* value(const ::custom_msgs::TruckState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::TruckState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position p\n\
float32 theta1\n\
float32 theta2\n\
\n\
================================================================================\n\
MSG: custom_msgs/Position\n\
int32 x\n\
int32 y\n\
";
  }

  static const char* value(const ::custom_msgs::TruckState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::TruckState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.theta1);
      stream.next(m.theta2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TruckState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::TruckState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::TruckState_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    s << std::endl;
    Printer< ::custom_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "theta1: ";
    Printer<float>::stream(s, indent + "  ", v.theta1);
    s << indent << "theta2: ";
    Printer<float>::stream(s, indent + "  ", v.theta2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_TRUCKSTATE_H
