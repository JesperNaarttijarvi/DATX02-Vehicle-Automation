// Generated by gencpp from file custom_msgs/Intersection_Action.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_INTERSECTION_ACTION_H
#define CUSTOM_MSGS_MESSAGE_INTERSECTION_ACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct Intersection_Action_
{
  typedef Intersection_Action_<ContainerAllocator> Type;

  Intersection_Action_()
    : Intersection_1()
    , Intersection_2()
    , Intersection_3()
    , Roundabout()  {
    }
  Intersection_Action_(const ContainerAllocator& _alloc)
    : Intersection_1(_alloc)
    , Intersection_2(_alloc)
    , Intersection_3(_alloc)
    , Roundabout(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Intersection_1_type;
  _Intersection_1_type Intersection_1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Intersection_2_type;
  _Intersection_2_type Intersection_2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Intersection_3_type;
  _Intersection_3_type Intersection_3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Roundabout_type;
  _Roundabout_type Roundabout;





  typedef boost::shared_ptr< ::custom_msgs::Intersection_Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::Intersection_Action_<ContainerAllocator> const> ConstPtr;

}; // struct Intersection_Action_

typedef ::custom_msgs::Intersection_Action_<std::allocator<void> > Intersection_Action;

typedef boost::shared_ptr< ::custom_msgs::Intersection_Action > Intersection_ActionPtr;
typedef boost::shared_ptr< ::custom_msgs::Intersection_Action const> Intersection_ActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::Intersection_Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::Intersection_Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/kem/Desktop/ChalmersKandidat/Kandidat19/catkin_ws_clean/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Intersection_Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Intersection_Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Intersection_Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a626a67bdca8b2c0c5130ea57d7f1299";
  }

  static const char* value(const ::custom_msgs::Intersection_Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa626a67bdca8b2c0ULL;
  static const uint64_t static_value2 = 0xc5130ea57d7f1299ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/Intersection_Action";
  }

  static const char* value(const ::custom_msgs::Intersection_Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Intersection_1\n\
string Intersection_2\n\
string Intersection_3\n\
string Roundabout\n\
";
  }

  static const char* value(const ::custom_msgs::Intersection_Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Intersection_1);
      stream.next(m.Intersection_2);
      stream.next(m.Intersection_3);
      stream.next(m.Roundabout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Intersection_Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::Intersection_Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::Intersection_Action_<ContainerAllocator>& v)
  {
    s << indent << "Intersection_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Intersection_1);
    s << indent << "Intersection_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Intersection_2);
    s << indent << "Intersection_3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Intersection_3);
    s << indent << "Roundabout: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Roundabout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_INTERSECTION_ACTION_H
