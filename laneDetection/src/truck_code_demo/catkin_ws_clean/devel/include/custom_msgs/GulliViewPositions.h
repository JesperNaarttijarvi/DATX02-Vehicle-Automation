// Generated by gencpp from file custom_msgs/GulliViewPositions.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_GULLIVIEWPOSITIONS_H
#define CUSTOM_MSGS_MESSAGE_GULLIVIEWPOSITIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msgs/Position.h>
#include <custom_msgs/Position.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct GulliViewPositions_
{
  typedef GulliViewPositions_<ContainerAllocator> Type;

  GulliViewPositions_()
    : p1()
    , tagid1(0)
    , p2()
    , tagid2(0)
    , cameraid(0)  {
    }
  GulliViewPositions_(const ContainerAllocator& _alloc)
    : p1(_alloc)
    , tagid1(0)
    , p2(_alloc)
    , tagid2(0)
    , cameraid(0)  {
  (void)_alloc;
    }



   typedef  ::custom_msgs::Position_<ContainerAllocator>  _p1_type;
  _p1_type p1;

   typedef int32_t _tagid1_type;
  _tagid1_type tagid1;

   typedef  ::custom_msgs::Position_<ContainerAllocator>  _p2_type;
  _p2_type p2;

   typedef int32_t _tagid2_type;
  _tagid2_type tagid2;

   typedef int32_t _cameraid_type;
  _cameraid_type cameraid;





  typedef boost::shared_ptr< ::custom_msgs::GulliViewPositions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::GulliViewPositions_<ContainerAllocator> const> ConstPtr;

}; // struct GulliViewPositions_

typedef ::custom_msgs::GulliViewPositions_<std::allocator<void> > GulliViewPositions;

typedef boost::shared_ptr< ::custom_msgs::GulliViewPositions > GulliViewPositionsPtr;
typedef boost::shared_ptr< ::custom_msgs::GulliViewPositions const> GulliViewPositionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::GulliViewPositions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/kem/Desktop/ChalmersKandidat/Kandidat19/catkin_ws_clean/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::GulliViewPositions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::GulliViewPositions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::GulliViewPositions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "183dd0693b2375fdac3c57ae3e24b202";
  }

  static const char* value(const ::custom_msgs::GulliViewPositions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x183dd0693b2375fdULL;
  static const uint64_t static_value2 = 0xac3c57ae3e24b202ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/GulliViewPositions";
  }

  static const char* value(const ::custom_msgs::GulliViewPositions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position p1\n\
int32 tagid1\n\
Position p2\n\
int32 tagid2\n\
int32 cameraid\n\
\n\
\n\
================================================================================\n\
MSG: custom_msgs/Position\n\
int32 x\n\
int32 y\n\
";
  }

  static const char* value(const ::custom_msgs::GulliViewPositions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p1);
      stream.next(m.tagid1);
      stream.next(m.p2);
      stream.next(m.tagid2);
      stream.next(m.cameraid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GulliViewPositions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::GulliViewPositions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::GulliViewPositions_<ContainerAllocator>& v)
  {
    s << indent << "p1: ";
    s << std::endl;
    Printer< ::custom_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.p1);
    s << indent << "tagid1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tagid1);
    s << indent << "p2: ";
    s << std::endl;
    Printer< ::custom_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.p2);
    s << indent << "tagid2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tagid2);
    s << indent << "cameraid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cameraid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_GULLIVIEWPOSITIONS_H
